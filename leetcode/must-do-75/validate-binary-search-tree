"""
Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.


Example 1:
Input: root = [2,1,3]
Output: true
"""

import sys

# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        print(root)

        def check_val(root, lower, upper):
            if root is None:
                return True
            print(root.val, lower, upper)

            if root.val <= lower or root.val >= upper:
                return False

            if check_val(root.left, lower, root.val):
                return check_val(root.right, root.val, upper)
            return False

        return check_val(root, -sys.maxsize, sys.maxsize)